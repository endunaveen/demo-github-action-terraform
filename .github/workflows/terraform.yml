name: 'Terraform'

on:
  push:
    branches: [ "master" ]
  

jobs:
  terraform:
    name: 'Terraform'
    env:
      # AWS secrets
      
      AWS_REGION: 'us-east-1'
      TF_VERSION: '1.4.0'
    runs-on: ubuntu-latest


    

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
       aws_access_key_id: ${{ secrets.AWS_DEVOPS_ACCESS_KEY_ID }}
       aws_secret_access_key: ${{secrets.AWS_DEVOPS_SECRET_ACCESS_KEY }}
       aws_region: ${{ env.AWS_REGION}}
       


    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
       terraform_version: ${{ env.TF_VERSION}}
     

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -out=tfplan

      # On push to "master", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/master'
      run: terraform apply -auto-approve tfplan
